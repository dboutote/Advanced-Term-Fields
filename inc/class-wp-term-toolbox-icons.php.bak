<?php

// No direct access
if ( ! function_exists( 'add_filter' ) ) {
	header( 'Status: 403 Forbidden' );
	header( 'HTTP/1.1 403 Forbidden' );
	exit();
}


/**
 * Adds icons for taxonomy terms
 *
 * @since 0.1.0
 *
 */
class WP_Term_Toolbox_Icons {

	/**
	 * @var string Plugin version
	 */
	public $version = '0.1.0';


	/**
	 * @var string Database version
	 */
	public $db_version = 201601230001;


	/**
	 * @var string Database version
	 */
	public $db_version_key = 'wp_term_toolbox_icons_version';


	/**
	 * @var string Metadata key
	 */
	public $meta_key = 'term_icon';
	
	/**
	 * @var string No meta value
	 */
	public $no_meta_value = '&#8212;';


	/**
	 * @var string $file File path to main plugin file
	 *
	 * @since 0.1.0
	 */
	public $file = '';

	/**
	 * @var string $url Url to main plugin dir
	 *
	 * @since 0.1.0
	 */
	public $url = '';

	/**
	 * @var string $path File path to main plugin dir
	 *
	 * @since 0.1.0
	 */
	public $path = '';

	/**
	 * @var string $basename Base name for plugin
	 *
	 * @since 0.1.0
	 */
	public $basename = '';

	/**
	 * @var array $taxnomies  Taxonomines used by plugin
	 *
	 * @since 0.1.0
	 */
	public $taxonomies = array();


/**
 * Constructor
 */
public function __construct( $file = '' ) {

	// Setup plugin
	$this->file     = $file;
	$this->url      = plugin_dir_url( $this->file );
	$this->path     = plugin_dir_path( $this->file );
	$this->basename = plugin_basename( $this->file );

	// Hook into the taxonomies
	$this->taxonomies = WP_Term_Toolbox_Utils::get_taxonomies();
	$this->hook_into_terms($this->taxonomies);

	// Load admin scripts/styles
	$this->load_admin_scripts();
	
	$this->load_admin_hooks();

	// Process meta
	$this->process_term_meta();

}

public function load_admin_hooks()
{
	// Quick edit
	//add_action( 'quick_edit_custom_box', array( $this, 'quick_edit_form_field' ), 10, 3 );
}


public function process_term_meta()
{
	add_action( 'create_term', array( $this, 'save_term_meta' ), 10, 2 );
	add_action( 'edit_term',   array( $this, 'save_term_meta' ), 10, 2 );
}


public function save_term_meta( $term_id = 0, $taxonomy = '' )
{
	$meta_value = ( ! empty( $_POST[$this->meta_key] ) ) ? $_POST[$this->meta_key] : '' ;
	$this->set_term_meta( $term_id, $taxonomy, $meta_value );
}


public function set_term_meta( $term_id = 0, $taxonomy = '', $meta_value = '', $clean_cache = false )
{
	// if meta value is empty, delete else update
	if ( empty( $meta_value ) ) {
		delete_term_meta( $term_id, $this->meta_key );
	} else {
		update_term_meta( $term_id, $this->meta_key, $meta_value );
	}

	// Maybe clean the term cache
	if ( true === $clean_cache ) {
		clean_term_cache( $term_id, $taxonomy );
	}
}


public function load_admin_scripts()
{
	if ( is_blog_admin() || doing_action( 'wp_ajax_inline_save_tax' ) ) {
		add_action( 'load-edit-tags.php', array( $this, 'admin_scripts'  ) );
	}
}

/**
 * Enqueue Styles and Scripts in the Admin
 *
 * @access public
 * @since 0.1.0
 *
 */
public function admin_scripts()
{
	// Quick edit
	#add_action( 'quick_edit_custom_box', array( $this, 'quick_edit_form_field' ), 10, 3 );
	
	// Enqueue javascript
	add_action( 'admin_enqueue_scripts', array( $this, 'enqueue_admin_scripts' ) );
	add_action( 'admin_head',            array( $this, 'admin_head_styles'      ) );

}

/**
 * Style the term-icon column
 *
 * @since 0.1.0
 */
public function admin_head_styles()
{
?>
	<style type="text/css">
		.column-term-icon {
			width: 74px;
		}
		.term-icon {
			-webkit-font-smoothing: antialiased;
			-moz-osx-font-smoothing: grayscale;
			font-family: dashicons;
			font-size: 25px;
			font-weight: normal;
			height: 25px;
			line-height: 25px;
			margin-top: 2px;
			vertical-align: top;
			width: 25px;
		}
	</style>
<?php
}



/**
 * Enqueue quick-edit JS
 *
 * @since 0.1.0
 */
public function enqueue_admin_scripts()
{

	wp_enqueue_script( 'term-icons-admin', $this->url . 'js/admin.js', array( 'jquery' ), '', true );
	wp_enqueue_script( 'dashicons-picker', $this->url . 'js/dashicons-picker.js', array( 'jquery' ), '1.1', true );
	wp_enqueue_style( 'dashicons-picker', $this->url . 'css/dashicons-picker.css', array( 'dashicons' ), '1.0', false );
/*
	wp_enqueue_script(
		'term-icons',
		$this->url . 'js/term-icons.js',
		array( 'dashicons-picker' ),
		'',
		true
	);
	*/

}


public function hook_into_terms( $taxonomies )
{
	if ( ! empty($taxonomies) ) :

		foreach ( $taxonomies as $value ) {
			add_filter( "manage_edit-{$value}_columns",          array( $this, 'add_column_header' ) );
			add_filter( "manage_{$value}_custom_column",         array( $this, 'add_column_value'  ), 10, 3 );
			add_filter( "manage_edit-{$value}_sortable_columns", array( $this, 'sortable_columns'  ) );

			add_action( "{$value}_add_form_fields",  array( $this, 'add_form_field'  ) );
			add_action( "{$value}_edit_form_fields", array( $this, 'edit_form_field' ) );
		}
	endif;
}


public function format_column_output($meta_value)
{
	$output = '<i data-icon="' . $meta_value . '" class="term-icon dashicons ' . esc_attr( $meta_value ) . '"></i>';
	return $output;
}


public function add_column_header( $columns = array() ) 
{
	$columns[$this->meta_key] = __( 'Icon', 'term-icon' );

	return $columns;
}


public function add_column_value( $empty = '', $custom_column = '', $term_id = 0 ) 
{

	if ( empty( $_REQUEST['taxonomy'] ) || ( $this->meta_key !== $custom_column ) || ! empty( $empty ) ) {
		return;
	}

	// Get the meta value
	$meta_value = $this->get_meta( $term_id );
	$return_value = $this->no_meta_value;

	// Output HTML element if not empty
	if ( ! empty( $meta_value ) ) {
		$return_value = $this->format_column_output( $meta_value );
	}

	echo $return_value;
}


public function sortable_columns( $columns = array() ) 
{
	$columns[$this->meta_key] = $this->meta_key;
	return $columns;
}


public function get_meta( $term_id = 0 ) 
{
	return get_term_meta( $term_id, $this->meta_key, true );
}

public function edit_form_field( $term = false ) 
{
?>
<tr class="form-field <?php echo esc_attr( $this->meta_key ); ?>-wrap">
	<th scope="row" valign="top">
		<label for="<?php echo esc_attr( $this->meta_key ); ?>"><?php _ex( 'Icon', 'term-icon' ); ?></label>
	</th>
	<td>
		<input name="<?php echo esc_attr( $this->meta_key ); ?>" id="<?php echo esc_attr( $this->meta_key ); ?>" type="text" value="<?php echo $this->get_meta( $term->term_id ); ?>" size="20" />
		<input type="button" data-target="#<?php echo esc_attr( $this->meta_key ); ?>" class="button dashicons-picker" value="<?php esc_html_e( 'Choose Icon', 'wp-term-toolbox' ); ?>" />
		<p class="description">
			<?php esc_html_e( 'Assign terms a custom icon to visually separate them from each-other.', 'wp-term-icons' ); ?>
		</p>
	</td>
</tr>
<?php
}

public function add_form_field() 
{
?>
	<div class="form-field <?php echo esc_attr( $this->meta_key ); ?>-wrap">
		<label for="<?php echo esc_attr( $this->meta_key ); ?>"><?php _ex( 'Icon', 'term-icon' ); ?></label>
		<input class="regular-text" name="<?php echo esc_attr( $this->meta_key ); ?>" id="<?php echo esc_attr( $this->meta_key ); ?>" type="text" value="" size="20"  />
		<input type="button" data-target="#<?php echo esc_attr( $this->meta_key ); ?>" class="button dashicons-picker" value="<?php esc_html_e( 'Choose Icon', 'wp-term-toolbox' ); ?>" />
		<p><?php _e('Select an icon to represent this term.'); ?></p>
	</div>
<?php
}

public function quick_edit_form_field( $column_name = '', $screen = '', $name = '' ) {

	// Bail if not the meta_key column on the `edit-tags` screen for a visible taxonomy
	if ( ( $this->meta_key !== $column_name ) || ( 'edit-tags' !== $screen ) || ! in_array( $name, $this->taxonomies ) ) {
		return false;
	} ?>

	<fieldset>
		<div class="inline-edit-col">
			<label>
				<span class="title"><?php esc_html_e( 'Icon', 'wp-term-icons' ); ?></span>
				<span class="input-text-wrap">
					<input type="text" class="ptitle" name="<?php echo esc_attr( $this->meta_key ); ?>" value="" size="20" />
				</span>
			</label>
		</div>
	</fieldset>

	<?php
}


}